<?php

namespace Tests\Feature\Http\Controllers\Bost;

use App\Models\Users\User;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Illuminate\Foundation\Testing\WithFaker;
use Illuminate\Http\Response;
use Laravel\Passport\Passport;
use Tests\TestCase;

class SettingsControllerTest extends TestCase
{
    use RefreshDatabase, WithFaker;

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        $this->seed(\RolesAndPermissionsSeeder::class);

        $this->seed(\SettingsTableSeeder::class);
    }

    protected function indexRoute()
    {
        return route('settings.index');
    }

    protected function updateRoute()
    {
        return route('settings.update');
    }

    /**
     * A basic feature test example.
     *
     * @return void
     */
    public function testBookieCanRetrieveAllSettings()
    {
        $bookie = factory(User::class)->create();
        $bookie->assignRole('bookie');

        Passport::actingAs($bookie);

        $response = $this->getJson($this->indexRoute());

        $response->assertStatus(200);
        $response->assertJson([
            'data' => setting('global')
        ]);
    }

    public function testBookieCanUpdateSettings()
    {
        $bookie = factory(User::class)->create([
            'google2fa_enabled' => false,
            'password' => $password = 'Passwor3'
        ]);

        $bookie->assignRole('bookie');

        Passport::actingAs($bookie);

        $response = $this->putJson($this->updateRoute(), [
            'block_sports_book' => 1,
            'password' => $password
        ]);

        $response->assertSuccessful();
        $response->assertJson([
            'data' => setting('global')
        ]);

        self::assertEquals(1, setting('global.block_sports_book'));
    }

    public function testCanNotUpdateSettingsWithoutPermissions()
    {
        $user = factory(User::class)->create([
            'google2fa_enabled' => false,
            'password' => $password = 'Passwor3'
        ]);

        Passport::actingAs($user);

        $response = $this->putJson($this->updateRoute(), [
            'block_sports_book' => 1,
            'password' => $password
        ]);

        $response->assertForbidden();

        self::assertEquals(0, setting('global.block_sports_book'));
    }

    public function testShouldRequirePasswordToUpdateSettings()
    {
        $bookie = factory(User::class)->create([
            'google2fa_enabled' => false,
        ]);

        $bookie->assignRole('bookie');

        Passport::actingAs($bookie);

        $response = $this->putJson($this->updateRoute(), [
            'block_sports_book' => 1
        ]);

        $response->assertStatus(Response::HTTP_UNPROCESSABLE_ENTITY);
        $response->assertJsonValidationErrors([
            'password' => 'The password field is required.'
        ]);
    }

    public function testShouldRequire2faToUpdateSettingsIfEnabled()
    {
        $bookie = factory(User::class)->create([
            'google2fa_enabled' => true,
        ]);

        $bookie->assignRole('bookie');

        Passport::actingAs($bookie);

        $response = $this->putJson($this->updateRoute(), [
            'block_sports_book' => 1
        ]);

        $response->assertStatus(Response::HTTP_UNPROCESSABLE_ENTITY);
        $response->assertJsonValidationErrors([
            'one_time_password' => 'The one time password field is required.'
        ]);
    }

    public function testShouldValidateUpdateSettingsRequest()
    {
        $bookie = factory(User::class)->create();
        $bookie->assignRole('bookie');

        Passport::actingAs($bookie);

        $response = $this->putJson($this->updateRoute(), [
            'block_sports_book' => 'Some wrong data'
        ]);

        $response->assertStatus(Response::HTTP_UNPROCESSABLE_ENTITY);
    }
}
