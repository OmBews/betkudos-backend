<?php

namespace Tests\Feature\Http\Controllers\API\FeedController;

use App\Models\Events\MatchMarket;
use App\Models\Countries\Country;
use App\Models\Leagues\League;
use App\Models\Markets\Market;
use App\Models\Markets\MarketOdd;
use App\Models\Events\Event;
use App\Models\Sports\Sport;
use Database\Seeders\CountryTableSeeder;
use Database\Seeders\MarketGroupsTableSeeder;
use Database\Seeders\SoccerMarketsSeeder;
use Database\Seeders\SportsTableSeeder;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Illuminate\Foundation\Testing\WithFaker;
use Tests\TestCase;

class FeedControllerTestCase extends TestCase
{
    use RefreshDatabase, WithFaker;

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        $this->seed(CountryTableSeeder::class);
        $this->seed(SportsTableSeeder::class);
        $this->seed(MarketGroupsTableSeeder::class);
        $this->seed(SoccerMarketsSeeder::class);
    }

    protected function popularRoute(string $status, int $sport)
    {
        return route('feed.popular', [
            'status' => $status,
            'sport' => $sport
        ]);
    }

    protected function fromTodayRoute(int $sport)
    {
        return route('feed.today', ['sport' => $sport]);
    }

    protected function countryCompetitionsRoute(Country $country, Sport $sport)
    {
        return route('feed.competitions', ['country' => $country->getKey(), 'sport' => $sport->getKey()]);
    }

    protected function upcomingPreviewRoute()
    {
        return route('feed.upcoming-preview');
    }

    protected function factoryUpcomingMatches(League $league, $startsAt = '+1 hour', $amount = 10, $status = null)
    {
        $sport = Sport::query()->first();

        $fullTimeResultId = (new Market())->fullTimeResult()->getKey();
        $bothTeamsToScoreId = (new Market())->bothToScore()->getKey();

        return factory(Event::class, $amount)->create([
            'time_status' => $status ?: Event::STATUS_NOT_STARTED,
            'league_id' => $league->bet365_id,
            'sport_id' => $sport->bet365_id,
            'starts_at' => strtotime($startsAt)
        ])->each(function ($match) use ($status, $bothTeamsToScoreId, $fullTimeResultId) {
            $FullTimeResultMatchMarket = MatchMarket::query()->create(['market_id' => $fullTimeResultId, 'match_id' => $match->getKey()]);
            $BothToScoreMatchMarket = MatchMarket::query()->create(['market_id' => $bothTeamsToScoreId, 'match_id' => $match->getKey()]);
            $match->odds()->saveMany(
                factory(MarketOdd::class, 3)->create([
                    'match_id' => $match->id,
                    'market_id' => $fullTimeResultId,
                    'match_market_id' => $FullTimeResultMatchMarket->getKey(),
                    'is_live' => $status === Event::STATUS_IN_PLAY,
                ])
            );

            $match->odds()->saveMany(
                factory(MarketOdd::class, 2)->create([
                    'match_id' => $match->id,
                    'market_id' => $bothTeamsToScoreId,
                    'match_market_id' => $BothToScoreMatchMarket->getKey(),
                    'is_live' => $status === Event::STATUS_IN_PLAY,
                ])
            );

            $match->home()->save(
                factory(\App\Models\Teams\Team::class)->create()
            );

            $match->away()->save(
                factory(\App\Models\Teams\Team::class)->create()
            );
        });
    }
}
